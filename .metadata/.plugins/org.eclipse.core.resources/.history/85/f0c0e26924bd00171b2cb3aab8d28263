package aidEval;

import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


//TODO: Parsed Mapper -> Injection


public class JsonCodeParser {

	JsonCodeBase jcb = new JsonCodeBase();
	
	// json process method
	public void processJson() {
		String jsonStr = "{\"problemNum\":1,\"originalCodeString\":\"def sum(a, b):\\n    s = a + b\\n    return s\\n\\r\\ntotal = sum(4, 7)\\r\\nprint(total)\",\"blankCodeString\":\"def sum(a, b):\\n#문세 시작 줄 주석\\n\\n\\n\\n#문제 끝 줄 주석\\n\\r\\n#문제 시작 줄 주석2\\n\\n\\n\\n#문제 시작 줄 주석2\",\"parseCodeArray\":[{\"type\":\"cm-keyword\",\"code\":\"def\"},{\"type\":\"cm-builtin\",\"code\":\"sum\"},{\"type\":\"cm-variable\",\"code\":\"a\"},{\"type\":\"cm-variable\",\"code\":\"b\"},{\"type\":\"cm-variable\",\"code\":\"s\"},{\"type\":\"cm-operator\",\"code\":\"=\"},{\"type\":\"cm-variable\",\"code\":\"a\"},{\"type\":\"cm-operator\",\"code\":\"+\"},{\"type\":\"cm-variable\",\"code\":\"b\"},{\"type\":\"cm-keyword\",\"code\":\"return\"},{\"type\":\"cm-variable\",\"code\":\"s\"},{\"type\":\"\",\"code\":\" \"},{\"type\":\"cm-variable\",\"code\":\"total\"},{\"type\":\"cm-operator\",\"code\":\"=\"},{\"type\":\"cm-builtin\",\"code\":\"sum\"},{\"type\":\"cm-number\",\"code\":\"4\"},{\"type\":\"cm-number\",\"code\":\"7\"},{\"type\":\"cm-builtin\",\"code\":\"print\"},{\"type\":\"cm-variable\",\"code\":\"total\"}]}";
		
		JsonParser parser = new JsonParser();
		JsonElement rootNode = parser.parse(jsonStr);
		
		if (rootNode.isJsonObject()) {
			JsonObject first = rootNode.getAsJsonObject();
			//JsonElement pbnNode = first.get("problemNum");
			
			//set pbn
			jcb.setProblemNum(first.get("problemNum").getAsDouble());
			//set ocs
			jcb.setOriginalCodeString(first.get("originalCodeString").toString());
			// set uid --> temp ID. TODO: make uid system
			jcb.setUid("tempUser");
			
			
			//get specific code array
			JsonArray parseCodeArray = first.getAsJsonArray("parseCodeArray");
			for(JsonElement ca: parseCodeArray) {
				JsonObject arrayObject = ca.getAsJsonObject();
				jcb.type.add(arrayObject.get("type").getAsString());
				jcb.code.add(arrayObject.get("code").getAsString());
				
			}
			
			//init hashmap
			initMap();
						
		}

	}

	//method for testing (message passing)
	public void testIO() {
		System.out.println(this.jcb.getProblemNum());
		System.out.println(this.jcb.getOriginalCodeString());
		System.out.println(this.jcb.getUid());
		System.out.println(this.jcb.type.subList(0, this.jcb.type.size()));
		System.out.println(this.jcb.code.subList(0, this.jcb.code.size()));
		
		for(Map.Entry<Object, Object> entry : this.jcb.codeTypeMap.entrySet()) {
			System.out.println(entry.getKey()+" : "+entry.getValue());
		}
		
	}
	
	//TODO: Mapper Initialize
	
	public void initMap() {
		
		for(int i=0;i<jcb.type.size();i++)
			jcb.codeTypeMap.put(jcb.type.get(i), jcb.code.get(i));
	}
	
	
	// JsonCodeBase Class includes :
	// 1. Problem Number 2. Original Code String Submitted by the User
	// 3. UID 4. Parsed code's type:code Map
	public class JsonCodeBase {
		double problemNum;
		String originalCodeString;
		String uid;
		ArrayList<String> type = new ArrayList<String>();
		ArrayList<String> code = new ArrayList<String>();
		Map<ArrayList, ArrayList> codeTypeMap = new HashMap<ArrayList, ArrayList>();
		
		public JsonCodeBase() {
			this.problemNum = 0;
			this.uid = null;
		}

		public double getProblemNum() {
			return problemNum;
		}

		public void setProblemNum(double problemNum) {
			this.problemNum = problemNum;
		}

		public String getOriginalCodeString() {
			return originalCodeString;
		}

		public void setOriginalCodeString(String originalCodeString) {
			this.originalCodeString = originalCodeString;
		}

		public String getUid() {
			return uid;
		}

		public void setUid(String uid) {
			this.uid = uid;
		}

		public void setType(String type) {
			this.type.add(type);
		}

		public void setCode(String code) {
			this.type.add(code);
		}
	}

}
