package aidEval;

import org.apache.commons.io.*;

import java.io.IOException;
import java.io.StringReader;
import java.net.MalformedURLException;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;

public class JsonHandler {

	public static void main(String[] args) throws MalformedURLException, IOException {
		//String url = "http://time.jsontest.com/";
		//String json = IOUtils.toString(new URL(url));
		String json = "{\"problemNum\":1,\"originalCodeString\":\"def sum(a, b):\\n    s = a + b\\n    return s\\n\\r\\ntotal = sum(4, 7)\\r\\nprint(total)\",\"blankCodeString\":\"def sum(a, b):\\n#문세 시작 줄 주석\\n\\n\\n\\n#문제 끝 줄 주석\\n\\r\\n#문제 시작 줄 주석2\\n\\n\\n\\n#문제 시작 줄 주석2\",\"parseCodeArray\":[{\"type\":\"cm-keyword\",\"code\":\"def\"},{\"type\":\"cm-builtin\",\"code\":\"sum\"},{\"type\":\"cm-variable\",\"code\":\"a\"},{\"type\":\"cm-variable\",\"code\":\"b\"},{\"type\":\"cm-variable\",\"code\":\"s\"},{\"type\":\"cm-operator\",\"code\":\"=\"},{\"type\":\"cm-variable\",\"code\":\"a\"},{\"type\":\"cm-operator\",\"code\":\"+\"},{\"type\":\"cm-variable\",\"code\":\"b\"},{\"type\":\"cm-keyword\",\"code\":\"return\"},{\"type\":\"cm-variable\",\"code\":\"s\"},{\"type\":\"\",\"code\":\" \"},{\"type\":\"cm-variable\",\"code\":\"total\"},{\"type\":\"cm-operator\",\"code\":\"=\"},{\"type\":\"cm-builtin\",\"code\":\"sum\"},{\"type\":\"cm-number\",\"code\":\"4\"},{\"type\":\"cm-number\",\"code\":\"7\"},{\"type\":\"cm-builtin\",\"code\":\"print\"},{\"type\":\"cm-variable\",\"code\":\"total\"}]}";
		// use the reader to read the json to a stream of tokens
		JsonReader reader = new JsonReader(new StringReader(json));
		// we call the handle object method to handle the full json object. This
		// implies that the first token in JsonToken.BEGIN_OBJECT, which is
		// always true.
		handleObject(reader);
	}

	
	private static void handleObject(JsonReader reader) throws IOException {
		reader.beginObject();
		while (reader.hasNext()) {
			JsonToken token = reader.peek();
			if (token.equals(JsonToken.BEGIN_ARRAY))
				handleArray(reader);
			else if (token.equals(JsonToken.END_OBJECT)) {
				reader.endObject();
				return;
			} else
				handleNonArrayToken(reader, token);
		}

	}


	public static void handleArray(JsonReader reader) throws IOException {
		reader.beginArray();
		while (true) {
			JsonToken token = reader.peek();
			if (token.equals(JsonToken.END_ARRAY)) {
				reader.endArray();
				break;
			} else if (token.equals(JsonToken.BEGIN_OBJECT)) {
				handleObject(reader);
			} else if (token.equals(JsonToken.END_OBJECT)) {
				reader.endObject();
			} else
				handleNonArrayToken(reader, token);
		}
	}

	
	public static void handleNonArrayToken(JsonReader reader, JsonToken token) throws IOException {
		if (token.equals(JsonToken.NAME))
			System.out.println(reader.nextName());
		else if (token.equals(JsonToken.STRING))
			System.out.println(reader.nextString());
		else if (token.equals(JsonToken.NUMBER))
			System.out.println(reader.nextDouble());
		else
			reader.skipValue();
	}
}
